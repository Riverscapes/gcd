Imports System.Windows.Forms
Imports GCDCore.ChangeDetection

Namespace ChangeDetection

    Public Class frmDoDProperties

        'Private m_pArcMap As ESRI.ArcGIS.ArcMapUI.IMxApplication
        Private m_bUserEditedName As Boolean
        Private m_frmSpatialCoherence As frmCoherenceProperties

        ' These are the results of the analysis. They are not populated until
        ' the user clicks OK and the change detection completes successfully.
        Private m_rDoD As ProjectDS.DoDsRow
        Private m_DoDResult As DoDResult

        ' Initial DEM Surveys to select. (User right clicked on a pair of DEMs
        ' in the project explorer and chose to add a new DoD for the same DEMs.
        Private m_nInitialNewDEMSurveyID As Integer
        Private m_nInitialOldDEMSurveyID As Integer

        ''' <summary>
        ''' Retrieve the GCD project dataset DoD row generated by the change detection
        ''' </summary>
        ''' <returns>GCD project dataset DoD row generated by the change detection</returns>
        ''' <remarks>Returns nothing if not calculated.</remarks>
        Public ReadOnly Property DoDRow As ProjectDS.DoDsRow
            Get
                Return m_rDoD
            End Get
        End Property

        Public ReadOnly Property DoDResults As DoDResult
            Get
                Return m_DoDResult
            End Get
        End Property

        Public Sub New()

            ' This call is required by the designer.
            InitializeComponent()

            ' Add any initialization after the InitializeComponent() call.
            'm_pArcMap = pArcMap
            m_bUserEditedName = False

            m_frmSpatialCoherence = New frmCoherenceProperties
            m_rDoD = Nothing
            m_DoDResult = Nothing

            m_nInitialNewDEMSurveyID = 0
            m_nInitialOldDEMSurveyID = 0

        End Sub

        Public Sub New(nNewDEMSurveyID As Integer, nOldDEMSurveyID As Integer)

            ' This call is required by the designer.
            InitializeComponent()

            ' Add any initialization after the InitializeComponent() call.
            'm_pArcMap = pArcMap
            m_bUserEditedName = False

            m_frmSpatialCoherence = New frmCoherenceProperties
            m_rDoD = Nothing
            m_DoDResult = Nothing

            m_nInitialNewDEMSurveyID = nNewDEMSurveyID
            m_nInitialOldDEMSurveyID = nOldDEMSurveyID

        End Sub

        Private Sub DoDPropertiesForm_Load(sender As Object, e As System.EventArgs) Handles Me.Load

            Try
                EnableDisableControls()
                For Each rDEMSurvey As ProjectDS.DEMSurveyRow In ProjectManagerBase.CurrentProject.GetDEMSurveyRows
                    Dim nIndex As Integer

                    nIndex = cboNewDEM.Items.Add(New naru.db.NamedObject(rDEMSurvey.DEMSurveyID, rDEMSurvey.Name))
                    If rDEMSurvey.DEMSurveyID = m_nInitialNewDEMSurveyID Then
                        cboNewDEM.SelectedIndex = nIndex
                    End If

                    nIndex = cboOldDEM.Items.Add(New naru.db.NamedObject(rDEMSurvey.DEMSurveyID, rDEMSurvey.Name))
                    If rDEMSurvey.DEMSurveyID = m_nInitialOldDEMSurveyID Then
                        cboOldDEM.SelectedIndex = nIndex
                    End If
                Next

                Dim sUnits As String = ProjectManagerBase.CurrentProject.DisplayUnits
                If Not String.IsNullOrEmpty(sUnits) Then
                    lblMinLodThreshold.Text = lblMinLodThreshold.Text.Replace("()", "(" & sUnits & ")")
                End If

                If cboNewDEM.Items.Count > 0 AndAlso cboNewDEM.SelectedIndex < 0 Then
                    cboNewDEM.SelectedIndex = 0
                End If

                If cboOldDEM.Items.Count > 0 AndAlso cboOldDEM.SelectedIndex < 0 Then
                    If cboOldDEM.Items.Count > 1 Then
                        cboOldDEM.SelectedIndex = 1
                    Else
                        cboOldDEM.SelectedIndex = 0
                    End If
                End If

                ' Load AOIs
                For Each rAOI As ProjectDS.AOIsRow In ProjectManagerBase.CurrentProject.GetAOIsRows
                    lstAOI.Items.Add(New naru.db.NamedObject(rAOI.AOIID, rAOI.Name))
                Next

                UpdateAnalysisName()

            Catch ex As Exception
                naru.error.ExceptionUI.HandleException(ex)
            End Try

        End Sub

        Private Sub cmdOK_Click(sender As System.Object, e As System.EventArgs) Handles cmdOK.Click

            If Not ValidateForm() Then
                Me.DialogResult = System.Windows.Forms.DialogResult.None
                Exit Sub
            End If

            Try
                Cursor.Current = System.Windows.Forms.Cursors.WaitCursor

                Dim gNewDEM As New GCDConsoleLib.Raster(ProjectManagerBase.GetAbsolutePath(GetDEMRow(cboNewDEM).Source))
                Dim gOldDEM As New GCDConsoleLib.Raster(ProjectManagerBase.GetAbsolutePath(GetDEMRow(cboOldDEM).Source))
                Dim dFolder As New IO.DirectoryInfo(txtOutputFolder.Text)
                Dim cdEngine As ChangeDetectionEngineBase = Nothing

                If rdoMinLOD.Checked Then
                    cdEngine = New ChangeDetectionEngineMinLoD(dFolder, gNewDEM, gOldDEM, valMinLodThreshold.Value)
                Else
                    ' Propagated or probabilistic. Use the error surfaces
                    Dim gNewError As New GCDConsoleLib.Raster(ProjectManagerBase.GetAbsolutePath(GetErrorRow(cboNewDEM, cboNewError).Source))
                    Dim gOldError As New GCDConsoleLib.Raster(ProjectManagerBase.GetAbsolutePath(GetErrorRow(cboOldDEM, cboOldError).Source))

                    If rdoPropagated.Checked Then
                        cdEngine = New ChangeDetectionEnginePropProb(dFolder, gNewDEM, gOldDEM, gNewError, gOldError)
                    Else
                        Dim spatCoherence As CoherenceProperties = Nothing
                        If chkBayesian.Checked Then
                            spatCoherence = New CoherenceProperties(m_frmSpatialCoherence.FilterSize, m_frmSpatialCoherence.PercentLess, m_frmSpatialCoherence.PercentGreater)
                        End If

                        cdEngine = New ChangeDetectionEngineProbabilistic(dFolder, gNewDEM, gOldDEM, gNewError, gOldError, valConfidence.Value)
                    End If
                End If

                m_DoDResult = cdEngine.Calculate(True, ProjectManagerBase.CellArea, ProjectManagerBase.Units)

                Dim rDoD As ProjectDS.DoDsRow = ProjectManagerBase.ds.DoDs.NewDoDsRow()
                rDoD.ProjectRow = ProjectManagerBase.CurrentProject
                rDoD.Name = txtName.Text
                rDoD.OutputFolder = ProjectManagerBase.GetRelativePath(dFolder.FullName)
                rDoD.NewSurveyName = cboNewDEM.Text
                rDoD.OldSurveyName = cboOldDEM.Text
                rDoD.TypeMinLOD = rdoMinLOD.Checked
                rDoD.TypePropagated = rdoPropagated.Checked
                rDoD.TypeProbabilistic = rdoProbabilistic.Checked
                rDoD.CellArea = ProjectManagerBase.CellArea.As(ProjectManagerBase.Units.ArUnit)
                rDoD.AreaErosionRaw = m_DoDResult.ChangeStats.ErosionRaw.GetArea(ProjectManagerBase.CellArea).As(ProjectManagerBase.Units.ArUnit)
                rDoD.AreaDepositonRaw = m_DoDResult.ChangeStats.DepositionRaw.GetArea(ProjectManagerBase.CellArea).As(ProjectManagerBase.Units.ArUnit)
                rDoD.AreaErosionThresholded = m_DoDResult.ChangeStats.ErosionThr.GetArea(ProjectManagerBase.CellArea).As(ProjectManagerBase.Units.ArUnit)
                rDoD.AreaDepositionThresholded = m_DoDResult.ChangeStats.DepositionThr.GetArea(ProjectManagerBase.CellArea).As(ProjectManagerBase.Units.ArUnit)
                rDoD.VolumeErosionRaw = m_DoDResult.ChangeStats.ErosionRaw.GetVolume(ProjectManagerBase.CellArea, ProjectManagerBase.Units.VertUnit).As(ProjectManagerBase.Units.VolUnit)
                rDoD.VolumeDepositionRaw = m_DoDResult.ChangeStats.DepositionRaw.GetVolume(ProjectManagerBase.CellArea, ProjectManagerBase.Units.VertUnit).As(ProjectManagerBase.Units.VolUnit)
                rDoD.VolumeErosionThresholded = m_DoDResult.ChangeStats.ErosionThr.GetVolume(ProjectManagerBase.CellArea, ProjectManagerBase.Units.VertUnit).As(ProjectManagerBase.Units.VolUnit)
                rDoD.VolumeDepositionThresholded = m_DoDResult.ChangeStats.DepositionThr.GetVolume(ProjectManagerBase.CellArea, ProjectManagerBase.Units.VertUnit).As(ProjectManagerBase.Units.VolUnit)
                rDoD.VolumeErosionError = m_DoDResult.ChangeStats.ErosionErr.GetVolume(ProjectManagerBase.CellArea, ProjectManagerBase.Units.VertUnit).As(ProjectManagerBase.Units.VolUnit)
                rDoD.VolumeDepositionError = m_DoDResult.ChangeStats.DepositionErr.GetVolume(ProjectManagerBase.CellArea, ProjectManagerBase.Units.VertUnit).As(ProjectManagerBase.Units.VolUnit)

                If TypeOf m_DoDResult Is DoDResultMinLoD Then
                    rDoD.Threshold = DirectCast(m_DoDResult, DoDResultMinLoD).Threshold
                Else
                    If TypeOf m_DoDResult Is DoDResultPropagated Then
                        rDoD.PropagatedErrorRasterPath = ProjectManagerBase.GetRelativePath(DirectCast(m_DoDResult, DoDResultPropagated).PropErrRaster)

                        If TypeOf m_DoDResult Is DoDResultProbabilisitic Then
                            Dim res As DoDResultProbabilisitic = DirectCast(m_DoDResult, DoDResultProbabilisitic)

                            rDoD.Threshold = res.ConfidenceLevel
                            rDoD.ProbabilityRaster = ProjectManagerBase.GetRelativePath(res.ProbabilityRaster)
                            rDoD.SpatialCoErosionRaster = ProjectManagerBase.GetRelativePath(res.SpatialCoErosionRaster)
                            rDoD.SpatialCoDepositionRaster = ProjectManagerBase.GetRelativePath(res.SpatialCoDepositionRaster)
                            rDoD.ConditionalProbRaster = ProjectManagerBase.GetRelativePath(res.ConditionalProbabilityRaster)
                            rDoD.PosteriorRaster = ProjectManagerBase.GetRelativePath(res.PosteriorRaster)
                            rDoD.Bayesian = chkBayesian.Checked
                            rDoD.Filter = m_frmSpatialCoherence.FilterSize
                            rDoD.PercentLess = m_frmSpatialCoherence.PercentLess
                            rDoD.PercentMore = m_frmSpatialCoherence.PercentGreater
                        End If
                    End If
                End If

                ProjectManagerBase.ds.DoDs.AddDoDsRow(rDoD)
                ProjectManagerBase.save()

            Catch ex As Exception
                naru.error.ExceptionUI.HandleException(ex)
            Finally
                Cursor.Current = Cursors.Default
            End Try

        End Sub

        Private Function ValidateForm() As Boolean

            If String.IsNullOrEmpty(txtName.Text) Then
                MsgBox("Please enter a name for the analysis.", MsgBoxStyle.Information, GCDCore.Properties.Resources.ApplicationNameLong)
                Return False
            Else
                If IO.Directory.Exists(txtOutputFolder.Text) Then
                    MsgBox("An analysis folder with the same output path already exists. Please change the analysis name so that a different output folder will be used.", MsgBoxStyle.Information, GCDCore.Properties.Resources.ApplicationNameLong)
                    Return False
                End If
            End If

            If TypeOf cboNewDEM.SelectedItem Is naru.db.NamedObject Then
                If TypeOf cboOldDEM.SelectedItem Is naru.db.NamedObject Then
                    If DirectCast(cboNewDEM.SelectedItem, naru.db.NamedObject).ID = DirectCast(cboOldDEM.SelectedItem, naru.db.NamedObject).ID Then
                        MsgBox("Please choose two different DEM Surveys.", MsgBoxStyle.Information, GCDCore.Properties.Resources.ApplicationNameLong)
                        Return False
                    End If
                Else
                    MsgBox("Please select an Old DEM Survey.", MsgBoxStyle.Information, GCDCore.Properties.Resources.ApplicationNameLong)
                    Return False
                End If
            Else
                MsgBox("Please select a New DEM Survey.", MsgBoxStyle.Information, GCDCore.Properties.Resources.ApplicationNameLong)
                Return False
            End If

            If Not rdoMinLOD.Checked Then
                If Not TypeOf cboNewError.SelectedItem Is naru.db.NamedObject Then
                    MsgBox("Please select a new error surface.", MsgBoxStyle.Information, GCDCore.Properties.Resources.ApplicationNameLong)
                    Return False
                End If

                If Not TypeOf cboOldError.SelectedItem Is naru.db.NamedObject Then
                    MsgBox("Please select an old error surface.", MsgBoxStyle.Information, GCDCore.Properties.Resources.ApplicationNameLong)
                    Return False
                End If
            End If

            'If rdoAOI.Checked Then
            '    If Not TypeOf cboAOI.SelectedItem Is GISCode.ListItem Then
            '        MsgBox("Please select an AOI or choose to analyse the common area of the DEM Surveys.", MsgBoxStyle.Information, GCDCore.Properties.Resources.ApplicationNameLong)
            '        Return False
            '    End If
            'End If

            Return True

        End Function

        Private Sub rdoProbabilistic_CheckedChanged(sender As Object, e As System.EventArgs) Handles _
        rdoMinLOD.CheckedChanged,
        rdoPropagated.CheckedChanged,
        rdoProbabilistic.CheckedChanged

            EnableDisableControls()
            UpdateAnalysisName()

        End Sub

        Private Sub EnableDisableControls()

            lblNewError.Enabled = Not rdoMinLOD.Checked
            cboNewError.Enabled = Not rdoMinLOD.Checked
            lblOldError.Enabled = Not rdoMinLOD.Checked
            cboOldError.Enabled = Not rdoMinLOD.Checked

            valMinLodThreshold.Enabled = rdoMinLOD.Checked
            lblMinLodThreshold.Enabled = rdoMinLOD.Checked

            lblConfidence.Enabled = rdoProbabilistic.Checked
            valConfidence.Enabled = rdoProbabilistic.Checked
            chkBayesian.Enabled = rdoProbabilistic.Checked
            cmdBayesianProperties.Enabled = rdoProbabilistic.Checked AndAlso chkBayesian.Checked

        End Sub

#Region "DEM Selection Changed"

        Private Sub cboNewDEM_SelectedIndexChanged(sender As Object, e As System.EventArgs) Handles cboNewDEM.SelectedIndexChanged

            cboNewError.Items.Clear()
            Dim rDEM As ProjectDS.DEMSurveyRow = GetDEMRow(cboNewDEM)
            If TypeOf rDEM Is ProjectDS.DEMSurveyRow Then
                For Each rError As ProjectDS.ErrorSurfaceRow In rDEM.GetErrorSurfaceRows
                    cboNewError.Items.Add(New naru.db.NamedObject(rError.ErrorSurfaceID, rError.Name))
                Next
            End If

            If cboNewError.Items.Count = 1 Then
                cboNewError.SelectedIndex = 0
            End If
            UpdateAnalysisName()

        End Sub

        Private Sub cboOldDEM_SelectedIndexChanged(sender As Object, e As System.EventArgs) Handles cboOldDEM.SelectedIndexChanged

            cboOldError.Items.Clear()
            Dim rDEM As ProjectDS.DEMSurveyRow = GetDEMRow(cboOldDEM)
            If TypeOf rDEM Is ProjectDS.DEMSurveyRow Then
                For Each rError As ProjectDS.ErrorSurfaceRow In rDEM.GetErrorSurfaceRows
                    cboOldError.Items.Add(New naru.db.NamedObject(rError.ErrorSurfaceID, rError.Name))
                Next
            End If
            If cboOldError.Items.Count = 1 Then
                cboOldError.SelectedIndex = 0
            End If

            UpdateAnalysisName()
        End Sub

        Private Sub UpdateAnalysisName()

            If m_bUserEditedName Then
                Exit Sub
            End If

            Dim sAnalysisName As String = naru.os.File.RemoveDangerousCharacters(cboNewDEM.Text)
            If Not String.IsNullOrEmpty(sAnalysisName) Then
                sAnalysisName &= "_"
            End If

            If Not String.IsNullOrEmpty(cboOldDEM.Text) Then
                sAnalysisName &= naru.os.File.RemoveDangerousCharacters(cboOldDEM.Text)
            End If

            If rdoMinLOD.Checked Then
                sAnalysisName &= " MinLoD " & valMinLodThreshold.Value.ToString("#0.00")
            ElseIf rdoPropagated.Checked Then
                sAnalysisName &= " Prop"
            Else
                sAnalysisName &= " Prob " & valConfidence.Value.ToString("#0.00")
            End If

            txtName.Text = sAnalysisName.Trim()

        End Sub

#End Region

        Private Function GetDEMRow(cbo As ComboBox) As ProjectDS.DEMSurveyRow

            Dim rResult As ProjectDS.DEMSurveyRow = Nothing
            Dim lItem As naru.db.NamedObject = cbo.SelectedItem
            If TypeOf lItem Is naru.db.NamedObject Then
                rResult = ProjectManagerBase.ds.DEMSurvey.FindByDEMSurveyID(lItem.ID)
            End If

            Return rResult

        End Function

        Private Function GetErrorRow(cboDEM As ComboBox, cboError As ComboBox) As ProjectDS.ErrorSurfaceRow

            Dim rResult As ProjectDS.ErrorSurfaceRow = Nothing
            Dim lItem As naru.db.NamedObject = cboError.SelectedItem
            If TypeOf lItem Is naru.db.NamedObject Then
                For Each rError As ProjectDS.ErrorSurfaceRow In GetDEMRow(cboDEM).GetErrorSurfaceRows
                    If rError.ErrorSurfaceID = lItem.ID Then
                        rResult = rError
                        Exit For
                    End If
                Next
            End If

            Return rResult

        End Function

        Private Function GetAOIRow() As ProjectDS.AOIsRow

            Dim rResult As ProjectDS.AOIsRow = Nothing
            'Dim lItem As GISCode.ListItem = cboAOI.SelectedItem
            'If TypeOf lItem Is GISCode.ListItem Then
            '    For Each rAOI As ProjectDS.AOIsRow In GCD.GCDProject.ProjectManagerBase.CurrentProject.GetAOIsRows
            '        If rAOI.AOIID = lItem.ID Then
            '            rResult = rAOI
            '            Exit For
            '        End If
            '    Next
            'End If

            Return rResult

        End Function

        Private Sub rdoCommonArea_CheckedChanged(sender As Object, e As System.EventArgs)

            EnableDisableControls()
        End Sub

        Private Sub txtName_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtName.KeyDown
            m_bUserEditedName = True
        End Sub

        Private Sub txtName_TextChanged(sender As Object, e As System.EventArgs) Handles txtName.TextChanged

            Try
                If String.IsNullOrEmpty(txtName.Text) Then
                    txtOutputFolder.Text = String.Empty
                Else
                    txtOutputFolder.Text = ProjectManagerBase.OutputManager.GetDoDOutputFolder(txtName.Text)
                End If
            Catch ex As Exception

            End Try

        End Sub

        Private Sub cmdBayesianProperties_Click(sender As System.Object, e As System.EventArgs) Handles cmdBayesianProperties.Click

            m_frmSpatialCoherence.ShowDialog()

        End Sub

        Private Sub chkBayesian_CheckedChanged(sender As Object, e As System.EventArgs) Handles chkBayesian.CheckedChanged
            EnableDisableControls()
        End Sub

        Private Sub valConfidence_ValueChanged(sender As Object, e As System.EventArgs) Handles _
        valConfidence.ValueChanged,
        valMinLodThreshold.ValueChanged

            UpdateAnalysisName()
        End Sub

        Private Sub cmdHelp_Click(sender As System.Object, e As System.EventArgs) Handles cmdHelp.Click
            Process.Start(GCDCore.Properties.Resources.HelpBaseURL & "gcd-command-reference/gcd-project-explorer/j-change-detection-context-menu/i-add-change-detection")
        End Sub
    End Class

End Namespace